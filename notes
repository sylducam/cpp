C++98

Construcors
Quand un constructeur par defaut n'est pas necessaire, car il n'y a pas besoin
que l'utilisateur y accede, on peut le mettre en privee dans la class.hpp,
histoire de garder une forme canonique

Bonne idee d'ajouter un geter pour toute variable privee et une fonction pour
"serialiser" sa classe, sur le modele :
std::ostream&	operator<<(std::ostream& o, Sample const& rhs);
mais qui renvoie une string. Peut bien aider pour le debug
(todo : a approfondir, ecrire la fonction correctement et tester)

essayer d'utiliser le + de const et RDONLY possible car le langage c++ est
complexe et risque >> code robuste sur le long terme + save des heures de debug

private / public = controler l'encapsulation des membres d'une classe. Definit
ce que nous laissons a disposition ou non de l'utilisateur de la classe
> private = attributs et fonctions membres visibles uniquement a partir de 
l'interieur de la classe. Masquer les details d'implementation de la classe
a l'utilisateur
> public = "" visibles depuis l'interieur ET l'exterieur de la classe 

CLASS VS STRUCT:
struct = everything public
class = public and private need to be mentionned
so we prefer classes

this sert a faire reference a l'instance courante de la classe, au sein de la
classe. Donc, utile dans le cas ou nous avons plusieurs instance.
Il passe, sans que ce soit dit, en premier paramaetre cache de chaque fonction
membre (this = l'instance courante)

CONST
Une fonction est const lorsque ce qu'elle fait ne modifie pas l'instance
courante

NON MEMBER ATTRIBUTES AND NON MEMBER FUNCTIONS
variables et fonctions d'instance = attributs et fonctions membres
variables et fonctions de classe = attributs et fonctions non membres >> sont
modifies cross instances. Pour cela, utiliser static.

PENSER A METTRE UN ";" A LA FIN DE SA CLASE

<< et >> : operateurs de redirection de flux

We can call a class without keeping it in an instance, so the constructor,
things in between like if there are paramters or else and destructor are called
in a row